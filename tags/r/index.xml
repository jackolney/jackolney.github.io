<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R on Jack Olney</title><link>https://jackolney.github.io/tags/r/</link><description>Recent content in R on Jack Olney</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 15 Aug 2016 09:41:00 +0000</lastBuildDate><atom:link href="https://jackolney.github.io/tags/r/index.xml" rel="self" type="application/rss+xml"/><item><title>Webfonts in ggplot2</title><link>https://jackolney.github.io/posts/2016-08-15-ggplot2-font/</link><pubDate>Mon, 15 Aug 2016 09:41:00 +0000</pubDate><guid>https://jackolney.github.io/posts/2016-08-15-ggplot2-font/</guid><description>&lt;p>Thanks to Hadley&amp;rsquo;s &lt;a href="https://github.com/hadley/ggplot2">ggplot2 package&lt;/a>, we are no longer confined to base graphics plots in &lt;a href="https://www.r-project.org/">R&lt;/a>. However, by default all fonts are generated using the &amp;lsquo;Helvetica&amp;rsquo; family. Now this is a great sans serif font, as evidenced by the fact that it is use literally everywhere in everything.&lt;/p>
&lt;p>But now that we have these incredible graphical capabilities, and the ability to produce &lt;a href="http://fivethirtyeight.com/features/our-47-weirdest-charts-from-2015/">FiveThirtyEight&lt;/a> quality figures, we should really explore how to enhance our plots further with the use of better fonts.&lt;/p></description></item><item><title>Shiny Progress Bars</title><link>https://jackolney.github.io/posts/2016-04-01-shiny/</link><pubDate>Fri, 01 Apr 2016 09:41:00 +0000</pubDate><guid>https://jackolney.github.io/posts/2016-04-01-shiny/</guid><description>&lt;p>Lately, I have been working on developing a friendly shiny app around a mathematical model to enable non-modellers to get to grips with the model, play around and perhaps learn something too. This has really been as much about teaching myself Shiny as it has been about enabling others to interact with models.&lt;/p>
&lt;p>&lt;a href="http://shiny.rstudio.com/">Shiny&lt;/a>, is great package being developed by a handful of developers at RStudio, and it enables anyone to wrap their R code in an HTML front-end that will run on any computer with &lt;a href="https://www.r-project.org/">R&lt;/a> installed, and perhaps most importantly, run on &lt;em>any&lt;/em> computer if deployed to a Linux server running &lt;a href="https://www.rstudio.com/products/shiny/shiny-server2/">ShinyServer&lt;/a>.&lt;/p></description></item><item><title>Has the Apple Watch improved my fitness?</title><link>https://jackolney.github.io/posts/2015-12-27-apple-watch-health/</link><pubDate>Sun, 27 Dec 2015 09:41:00 +0000</pubDate><guid>https://jackolney.github.io/posts/2015-12-27-apple-watch-health/</guid><description>&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>Having owned an Apple Watch since early May, I have built up a substantial amount of data in Apple&amp;rsquo;s &amp;lsquo;HealthKit&amp;rsquo;, detailing my daily steps from in excess of a year prior to owning the watch to at least six months after. Therefore, a simple analysis of whether the watch has improved my fitness should be possible. Additionally, I can pull out heart-rate data, stair-flight data, exercise data and map a whole bunch of other interesting stuff.&lt;/p></description></item><item><title>Interactive Dynamic Models in R</title><link>https://jackolney.github.io/posts/2015-10-16-shiny-cascade/</link><pubDate>Fri, 16 Oct 2015 09:41:00 +0000</pubDate><guid>https://jackolney.github.io/posts/2015-10-16-shiny-cascade/</guid><description>&lt;p>As part of a new work package I am part of, we needed to develop a dynamic transmission model of HIV care that has a relatively user-friendly interface and that can be run on almost any device.&lt;/p>
&lt;p>The initial choice was to go with an Excel spreadsheet, and have a tab hidden in the background with the model running and a whole bunch of simple stuff at the front for the user to interact with. We then wanted this to develop further into something that had parameter &amp;lsquo;sliders&amp;rsquo; so the model was perhaps a little more intuitive.&lt;/p></description></item><item><title>Calling R from a Python instance</title><link>https://jackolney.github.io/posts/2015-07-01-calling-r-from-python/</link><pubDate>Wed, 01 Jul 2015 09:41:00 +0000</pubDate><guid>https://jackolney.github.io/posts/2015-07-01-calling-r-from-python/</guid><description>&lt;p>After spending several hours today trying to figure out how to call R from an instance of Python running on the departmental cluster, I figured that I better document this.&lt;/p>
&lt;h3 id="why-bother">Why bother?&lt;/h3>
&lt;p>Some background on my problem. I have an individual-based model written in C++ that describes the HIV epidemic in Kenya over time from 1970 to 2036/2056. This model is called through R which supplies a whole bunch of arguments allowing me to simulate a whole bunch of different scenarios. For some time now I have been using Python as a high-level manager for these simulations. I simple stick some python script in a directory, it creates all the directories, writes the R scripts, writes the .bat files and submits the jobs to the cluster.&lt;/p></description></item></channel></rss>